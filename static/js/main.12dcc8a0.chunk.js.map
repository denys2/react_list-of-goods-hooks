{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","App","useState","NONE","setSortType","setIsReversed","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAY,YAAOH,GAEzB,OAAQC,GACN,KAAKJ,EAASO,SACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MAEF,KAAKV,EAASY,OACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAU7C,OAJIR,GACFC,EAAaQ,UAGRR,G,SAjCJN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAoCE,IAAMe,EAAgB,WAC3B,MAAgCC,mBAAShB,EAASiB,MAAlD,mBAAOb,EAAP,KAAiBc,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOX,EAAP,KAAmBc,EAAnB,KAmBA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEhB,IAAaJ,EAASO,SAClB,iBACA,0BAENe,QA3BoB,WAC1BJ,EAAYlB,EAASO,WAmBjB,iCAYA,wBACEc,KAAK,SACLD,UACEhB,IAAaJ,EAASY,OAClB,iBACA,0BAENU,QAnCkB,WACxBJ,EAAYlB,EAASY,SA2BjB,4BAYA,wBACES,KAAK,SACLD,WACiB,IAAff,EACI,iBACA,0BAENiB,QA3Ca,WACnBH,GAAed,IAmCX,sBAYED,GAAYC,IACZ,wBACEgB,KAAK,SACLD,UAAU,4BACVE,QAhDS,WACjBJ,EAAYlB,EAASiB,MACrBE,GAAc,IA2CR,sBAUJ,6BACGjB,EAAkBD,EAAiB,CAAEG,WAAUC,eAAckB,KAC5D,SAACC,GAAD,OACE,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC5HrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.12dcc8a0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n\n    default:\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortGoodsByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortGoodsByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverseGoods = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const resetGoods = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            sortType === SortType.ALPHABET\n              ? 'button is-info'\n              : 'button is-info is-light'\n          }\n          onClick={sortGoodsByAlphabet}\n        >\n          Sort alphabetically\n\n        </button>\n        <button\n          type=\"button\"\n          className={\n            sortType === SortType.LENGTH\n              ? 'button is-info'\n              : 'button is-info is-light'\n          }\n          onClick={sortGoodsByLength}\n        >\n          Sort by length\n\n        </button>\n        <button\n          type=\"button\"\n          className={\n            isReversed === true\n              ? 'button is-info'\n              : 'button is-info is-light'\n          }\n          onClick={reverseGoods}\n        >\n          Reverse\n\n        </button>\n        {(sortType || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetGoods}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {getReorderedGoods(goodsFromServer, { sortType, isReversed }).map(\n          (good) => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ),\n        )}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}